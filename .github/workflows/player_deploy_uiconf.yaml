name: Deploy uiconf
run-name: Deploy uiconf

on:
  workflow_call:
    secrets:
      PLAYER_CENTRAL_ACCOUNT_ID:
        required: true
      PLAYER_LAMBDA_NAME:
        required: true
    inputs:
      stage:
        description: "stage - example: 'canary/beta/latest'"
        required: true
        type: string
      env:
        description: "env - example: 'qa/prod'"
        required: false
        type: string
      version:
        description: "version - example: '1.00.000'"
        required: true
        type: string
      schema-type:
        description: "schema-type - example: 'playerV3Versions/playerV3OvpVersions'"
        required: true
        type: string
      file-name:
        description: "uiconf file name in s3 - example 'playkit_playerV3Versions_7.60.39_canary.ini'"
        required: true
        type: string

jobs:
  deploy-uiconf:
    runs-on: [ ubuntu-latest ]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.PLAYER_CENTRAL_ACCOUNT_ID }}:role/central-oidc-github-actions
          role-session-name: githubAction-${{ github.run_id }}
          aws-region: "eu-central-1"

      - name: Get secret
        id: secret_name
        run: |
          if [ "${{ inputs.env }}" = "prod" ]; then
            secret_name="github-aws-all-accounts"
          else
            secret_name="github-aws-dev-qa-accounts"
          fi

          echo $secret_name
          echo "secret_name=$secret_name" >> $GITHUB_OUTPUT

      - name: Get environments list
        id: accounts
        run: |
          aws_envs=$(aws secretsmanager get-secret-value --secret-id  arn:aws:secretsmanager:eu-central-1:${{ secrets.PLAYER_CENTRAL_ACCOUNT_ID }}:secret:${{ steps.secret_name.outputs.secret_name }} --query SecretString --output text | jq -c .)
          echo $aws_envs | jq -c '.[]' | while read i; do account_id=$(jq -r '.account_id' <<< "$i"); echo "::add-mask::$account_id"; done
          accounts=$(echo $aws_envs | jq -c '.[]' | while read i; do jq -n --arg env "$(jq -r '.env' <<< "$i")" '{"env": $env}' ; done | jq -s -c .)
          echo $accounts
          echo "accounts=$accounts" >> $GITHUB_OUTPUT

      - name: Trigger uiconf deployment
        run: |
          echo '${{ steps.accounts.outputs.accounts }}' | jq -c '.[]' | while read i; do
            env_name="$(jq -r '.env' <<< "$i")"
            if [ ${env_name} = 'nvp1' ] || [ ${env_name} = 'nvq1' ] || [ ${env_name} = 'nvd1' -a ${{ inputs.schema-type }} != 'playerV3PartnersVersions' ]; then
              filter_tags="autodeploy,${{ inputs.schema-type }}_${{ inputs.stage }},${{ inputs.schema-type }}_list,${{ inputs.schema-type }},${{ inputs.stage }}"
              new_tags="autodeploy, ${{ inputs.schema-type }}_${{ inputs.stage }}, ${{ inputs.schema-type }}_list, ${{ inputs.version }}, ${{ inputs.schema-type }}, ${{ inputs.stage }}"
              generate_post_data="{\"secret_name\": \"${{ steps.secret_name.outputs.secret_name }}\", \"filter_tags\": \"${filter_tags}\", \"new_tags\": \"${new_tags}\", \"file_name\": \"${{ inputs.file-name }}\", \"env\": \"${env_name}\"}"

              aws lambda invoke --function-name ${{ secrets.PLAYER_LAMBDA_NAME }} --payload "${generate_post_data}" --cli-binary-format raw-in-base64-out response.json > /dev/null 2>&1

              status=$(jq -r '.status' response.json)

              echo "Running lambda on env ${env_name} finished:"
              if [ "${status}" = "Success" ]; then
                echo "Success"
                jq -r '.' response.json
              else
                echo "Failed"
                jq -r '.' response.json
                exit 1
              fi
            else
              echo "no uiconf on ${env_name}"
            fi
          done
