name: Upload to s3
run-name: Upload to s3

on:
  workflow_call:
    secrets:
      CENTRAL_ACCOUNT_ID:
        required: true
      S3_BUCKET_APPS:
        required: true
    inputs:
      aws-secret-central:
        description: "secret in central that include all the account ids"
        required: true
        type: string
      type:
        description: "choose player or plugin - example: 'plugin'"
        required: true
        type: string
      name:
        description: "name"
        required: true
        type: string
      version:
        description: "version"
        required: true
        type: string
      full-npm-name:
        description: "full-npm-name"
        required: true
        type: string

env:
  PLAYERS: "ovp tv"

jobs:
  get-accounts:
    runs-on: [ubuntu-latest]
    permissions:
      id-token: write
      contents: read
    outputs:
      accounts: ${{ steps.accounts.outputs.accounts }}
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.CENTRAL_ACCOUNT_ID }}:role/central-oidc-github-actions
          role-session-name: githubAction-${{ github.run_id }}
          aws-region: "eu-central-1"

      - name: Get environments list
        id: accounts
        run: |
          aws_envs=$(aws secretsmanager get-secret-value --secret-id  arn:aws:secretsmanager:eu-central-1:${{ secrets.CENTRAL_ACCOUNT_ID }}:secret:${{ inputs.aws-secret-central }} --query SecretString --output text | jq -c)
          accounts=$(echo $aws_envs | jq -c '.[]' | while read i; do jq -n --arg env "$(jq -r '.env' <<< "$i")" '{"env": $env, "os": "ubuntu-latest", "node-version": "17.x"}' ; done | jq -s -c)
          echo $accounts
          echo "accounts={\"include\":$accounts}" >> $GITHUB_OUTPUT

  upload-to-s3:
    needs: get-accounts
    strategy:
      matrix: ${{fromJSON(needs.get-accounts.outputs.accounts)}}
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Node.js version ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Download plugin package
        run: |
          download_url=$(yarn info --silent ${{ inputs.full-npm-name }} dist.tarball)
          curl -L ${download_url} -o package.tgz
          tar -xzf package.tgz

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.CENTRAL_ACCOUNT_ID }}:role/central-oidc-github-actions
          role-session-name: githubAction-${{ github.run_id }}
          aws-region: "eu-central-1"

      - name: Get specific account details
        id: specific_account
        run: |
          aws_envs=$(aws secretsmanager get-secret-value --secret-id  arn:aws:secretsmanager:eu-central-1:${{ secrets.CENTRAL_ACCOUNT_ID }}:secret:${{ inputs.aws-secret-central }} --query SecretString --output text | jq -c)
          echo $aws_envs | jq -c '.[]' | while read i; do account_id=$(jq -r '.account_id' <<< "$i"); echo "::add-mask::$account_id"; done
          specific_account=$(echo $aws_envs | jq -c '.[] | select(.env | contains("${{ matrix.env }}"))')
          echo "specific_account=$specific_account" >> $GITHUB_OUTPUT

      - name: Get account id
        id: account_id
        run: |
          account_id=$(echo '${{ steps.specific_account.outputs.specific_account }}' | jq -r '.account_id')
          echo "account_id=$account_id" >> $GITHUB_OUTPUT

      - name: Get region
        id: region
        run: |
          region=$(echo '${{ steps.specific_account.outputs.specific_account }}' | jq -r '.region')
          echo "region=$region" >> $GITHUB_OUTPUT

      - name: Upload plugin to s3 apps
        if: ${{ inputs.type == 'plugin' }}
        run: |
          # Assume role
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
                      $(aws sts assume-role \
                      --role-arn arn:aws:iam::${{ steps.account_id.outputs.account_id }}:role/${{ matrix.env }}-kalt-ovp-apps-role \
                      --role-session-name "${{ matrix.env }}-${{ github.run_id }}" \
                      --region ${{ steps.region.outputs.region }} \
                      --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
                      --output text))

          s3Path="s3://${{ matrix.env }}-${{ secrets.S3_BUCKET_APPS }}/bundler/playkit/modules/${{ inputs.name }}/${{ inputs.version }}"
          aws s3 cp package/dist/ ${s3Path}/ --recursive --exclude "*" --include "${{ inputs.name }}.js*"
          aws s3 ls ${s3Path}/
          if [ -d 'translations' ]; then
            aws s3 cp translations/ ${s3Path}/translations/ --recursive --include "*"
            aws s3 ls ${s3Path}/translations/
          fi
          jq '{version} + .kaltura' < package/package.json > package/manifest.json
          aws s3 cp package/manifest.json ${s3Path}/manifest.json

      - name: Upload player to s3 apps by assuming role
        if: ${{ inputs.type == 'player' }}
        run: |
          # Assume role
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
                      $(aws sts assume-role \
                      --role-arn arn:aws:iam::${{ steps.account_id.outputs.account_id }}:role/${{ matrix.env }}-kalt-ovp-apps-role \
                      --role-session-name "${{ matrix.env }}-${{ github.run_id }}" \
                      --region ${{ steps.region.outputs.region }} \
                      --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
                      --output text))

          for player in ${{ env.PLAYERS }}; do
            s3Path="s3://${{ matrix.env }}-${{ secrets.S3_BUCKET_APPS }}/bundler/playkit/modules/kaltura-${player}-player/${{ inputs.version }}"
            aws s3 cp package/dist/ ${s3Path}/ --recursive --exclude "*" --include "kaltura-${player}-player.js*"
            aws s3 ls ${s3Path}/
            if [ -d 'translations' ]; then
              aws s3 cp translations/ ${s3Path}/translations --recursive --include "*"
              aws s3 ls ${s3Path}/translations/
            fi
          done

