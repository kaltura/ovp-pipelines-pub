## CI - Upload packages to NPM
name: Full CICD
run-name: Full CICD

on:
  workflow_call:
    secrets:
      CENTRAL_ACCOUNT_ID:
        required: true
      SERVICES_ACCOUNT_ID:
        required: true
      S3_BUCKET_DEPLOYMENT:
        required: true
      S3_BUCKET_APPS:
        required: true
      NPM_TOKEN:
        required: true
      JENKINS_TOKEN:
        required: true
      LAMBDA_NAME:
        required: true
      MSTEAMS_WEBHOOK:
        required: true
    inputs:
      env:
        description: "env - example: 'qa/prod/all'"
        required: false
        type: string
      type:
        description: "choose player or plugin - example: 'plugin/plugin'"
        required: true
        type: string
      stage:
        description: "build for specific type - example: 'canary/beta/latest'"
        required: false
        type: string
      schema-type:
        description: "schema-type - example: 'playerV3Versions/playerV3OvpVersions'"
        required: true
        type: string
      aws-secret-central:
        description: "schema-type - example: 'github-aws-dev-qa-accounts-8iI9eS/xxx'"
        required: true
        type: string
      yarn-upgrade-list:
        description: "list of packages to overwrite in package.json - example: 'playkit-js/playkit-js@canary @playkit-js/playkit-js-dash@canary'"
        required: false
        type: string
      tests-yarn-run-to-execute:
        description: "list of package.json scripts - example: 'eslint flow test'"
        required: true
        type: string

jobs:
  running-tests:
    uses: ./.github/workflows/player_tests.yaml
    with:
      yarn-run-to-execute: ${{ inputs.tests-yarn-run-to-execute }}
  upload-packages-to-npm:
    needs: running-tests
    uses: ./.github/workflows/player_upload_to_npm.yaml
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    with:
      env: ${{ inputs.env }}
      yarn-upgrade-list: ${{ inputs.yarn-upgrade-list }}
  upload-to-s3:
    needs: upload-packages-to-npm
    uses: ./.github/workflows/player_upload_to_s3.yaml
    secrets:
      CENTRAL_ACCOUNT_ID: ${{ secrets.CENTRAL_ACCOUNT_ID }}
      S3_BUCKET_APPS: ${{ secrets.S3_BUCKET_APPS }}
    with:
      aws-secret-central: ${{ inputs.aws-secret-central }}
      type: ${{ inputs.type }}
      name: ${{ needs.upload-packages-to-npm.outputs.name }}
      version: ${{ needs.upload-packages-to-npm.outputs.version }}
      full-npm-name: ${{ needs.upload-packages-to-npm.outputs.full-npm-name }}
  update-schema:
    needs: [upload-to-s3, upload-packages-to-npm]
    uses: ./.github/workflows/player_update_schema.yaml
    secrets:
      CENTRAL_ACCOUNT_ID: ${{ secrets.CENTRAL_ACCOUNT_ID }}
      SERVICES_ACCOUNT_ID: ${{ secrets.SERVICES_ACCOUNT_ID }}
      S3_BUCKET_DEPLOYMENT: ${{ secrets.S3_BUCKET_DEPLOYMENT }}
    with:
      env: ${{ inputs.env }}
      type: ${{ inputs.type }}
      schema-type: ${{ inputs.schema-type }}
      name: ${{ needs.upload-packages-to-npm.outputs.name }}
      version: ${{ needs.upload-packages-to-npm.outputs.version }}
  build-uiconf:
    if: ${{ inputs.stage == 'canary' }}
    needs: [update-schema, upload-to-s3, upload-packages-to-npm]
    uses: ./.github/workflows/player_build_uiconf.yaml
    secrets:
      CENTRAL_ACCOUNT_ID: ${{ secrets.CENTRAL_ACCOUNT_ID }}
      SERVICES_ACCOUNT_ID: ${{ secrets.SERVICES_ACCOUNT_ID }}
      S3_BUCKET_DEPLOYMENT: ${{ secrets.S3_BUCKET_DEPLOYMENT }}
    with:
      stage: ${{ inputs.stage }}
      schema-type: ${{ inputs.schema-type }}
  deploy-uiconf:
    if: ${{ inputs.stage == 'canary' }}
    needs: [ build-uiconf, update-schema, upload-to-s3, upload-packages-to-npm ]
    uses: ./.github/workflows/player_deploy_uiconf.yaml
    secrets:
      JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
      CENTRAL_ACCOUNT_ID: ${{ secrets.CENTRAL_ACCOUNT_ID }}
      LAMBDA_NAME: ${{ secrets.LAMBDA_NAME }}
    with:
      stage: ${{ inputs.stage }}
      env: ${{ inputs.env }}
      version: ${{ needs.build-uiconf.outputs.version }}
      schema-type: ${{ inputs.schema-type }}
  notification:
    if: always()
    uses: ./.github/workflows/notification.yaml
    needs: [ deploy-uiconf, build-uiconf, update-schema, upload-to-s3, upload-packages-to-npm, running-tests ]
    secrets:
      MSTEAMS_WEBHOOK: ${{ secrets.MSTEAMS_WEBHOOK }}
    with:
      failure_status: ${{ contains(needs.*.result, 'failure') }}
      cancelled_status: ${{ contains(needs.*.result, 'cancelled') }}
