name: Build uiconf
run-name: Build uiconf

on:
  workflow_call:
    secrets:
      PLAYER_CENTRAL_ACCOUNT_ID:
        required: true
      PLAYER_SERVICES_ACCOUNT_ID:
        required: true
      PLAYER_S3_BUCKET_DEPLOYMENT:
        required: true
    inputs:
      stage:
        description: "build for specific type - example: 'canary/beta/latest'"
        required: true
        type: string
      env:
        description: "env - example: 'qa/prod'"
        required: false
        type: string
      schema-type:
        description: "schema-type - example: 'playerV3Versions/playerV3OvpVersions'"
        required: true
        type: string
      uiconf-new-version:
        type: string
        required: false
        description: "not required - if no value is given it will increment the minor version - example 'from 1.00 to 1.01'"
    outputs:
      version:
        description: "version - example: '1.00.000'"
        value: ${{ jobs.build-uiconf.outputs.version }}
      file-name:
        description: "ini file name - example 'playkit_playerV3Versions_7.60.39_canary.ini'"
        value: ${{ jobs.build-uiconf.outputs.file-name }}

jobs:
  build-uiconf:
    runs-on: [ ubuntu-latest ]
    permissions:
      id-token: write
      contents: read
    outputs:
      version: ${{ steps.version.outputs.version }}
      file-name: ${{ steps.file_name.outputs.file_name }}
    env:
      PRODUCT_VERSION: ${{ inputs.uiconf-new-version }}
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.PLAYER_CENTRAL_ACCOUNT_ID }}:role/central-oidc-github-actions
          role-session-name: githubAction
          aws-region: "eu-central-1"

      - name: Increase version and update ssm param
        id: version
        run: |
          # Assume role
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
                      $(aws sts assume-role \
                      --role-arn arn:aws:iam::${{ secrets.PLAYER_SERVICES_ACCOUNT_ID }}:role/nvp1-deployment-role \
                      --role-session-name "nvp1-${{ github.run_id }}" \
                      --region "us-east-1" \
                      --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
                      --output text))

          CANARY_VERSION=$(aws ssm get-parameters --names /player/versions/uiconf/canary --region us-east-1 | jq -r .Parameters[].Value)
          LATEST_VERSION=$(aws ssm get-parameters --names /player/versions/uiconf/latest --region us-east-1 | jq -r .Parameters[].Value)
          NEW_VERSION=""
          MAX_MINOR_VERSION=999

          MAJOR_VERSION=$(echo $LATEST_VERSION | cut -d. -f1)
          MINOR_VERSION=$(echo $LATEST_VERSION | cut -d. -f2)
          PATCH_VERSION=$(echo $CANARY_VERSION | cut -d. -f3)

          if [[ $MAJOR_VERSION == "" || $MINOR_VERSION == "" ]]; then
              echo "Could not determine major and minor version from $LATEST_VERSION"
              exit 1
          fi

          if [[ $STAGE == "canary" ]]; then
              if [[ $PATCH_VERSION == "NULL" ]]; then
                  NEW_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.001"
              else
                  INCREMENTED_PATCH_VERSION=$(printf "%03d" $((10#$PATCH_VERSION + 1)))
                  NEW_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${INCREMENTED_PATCH_VERSION}"
              fi
          fi

          if [[ $STAGE == "latest" ]]; then
              INCREMENTED_MINOR_VERSION=$(printf "%d" $((10#$MINOR_VERSION + 1)))
              if [[ $INCREMENTED_MINOR_VERSION -gt $MAX_MINOR_VERSION ]]; then
                  INCREMENTED_MINOR_VERSION="0"
                  MAJOR_VERSION=$((10#$MAJOR_VERSION + 1))
              fi
              NEW_VERSION="${MAJOR_VERSION}.${INCREMENTED_MINOR_VERSION}"
          fi

          if [[ $PRODUCT_VERSION != "" ]]; then
              NEW_VERSION=$PRODUCT_VERSION
          fi

          echo "new version is: ${NEW_VERSION}"

          if [[ $NEW_VERSION == "" ]]; then
              echo "Could not determine new version"
              exit 1
          fi

          aws ssm put-parameter --name "/player/versions/uiconf/${STAGE}" --value "${NEW_VERSION}" --overwrite --region us-east-1
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Build uiconf for ${{ inputs.stage }} on schema-type ${{ inputs.schema-type }}
        run: |
          # Assume role
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
                      $(aws sts assume-role \
                      --role-arn arn:aws:iam::${{ secrets.PLAYER_SERVICES_ACCOUNT_ID }}:role/nvp1-deployment-role \
                      --role-session-name "nvp1-${{ github.run_id }}" \
                      --region "us-east-1" \
                      --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
                      --output text))

          if [ "${{ inputs.stage }}" = "canary" ]; then
            jsonNameSchema="player-canary-${{ inputs.schema-type }}.json"
          elif [ "${{ inputs.env }}" = "qa" ] && ["${{ inputs.stage }}" = "beta" ]; then
            jsonNameSchema="player-qa-beta-${{ inputs.schema-type }}.json"
          elif [ "${{ inputs.env }}" = "prod" ] && ["${{ inputs.stage }}" = "beta" ]; then
            jsonNameSchema="player-prod-beta-${{ inputs.schema-type }}.json"
          elif [ "${{ inputs.env }}" = "prod" ] && ["${{ inputs.stage }}" = "latest" ]; then
            jsonNameSchema="player-prod-latest-${{ inputs.schema-type }}.json"
          else
            jsonNameSchema="player-qa-${{ inputs.schema-type }}.json"
          fi

          s3PathSchema="s3://nvp1-${{ secrets.PLAYER_S3_BUCKET_DEPLOYMENT }}/player/schema"
          aws s3 cp ${s3PathSchema}/${jsonNameSchema} ${jsonNameSchema}
          jsonConf=$(cat ${jsonNameSchema} | jq -c '.')

          iniName="playkit_${{ inputs.schema-type }}_${{ steps.version.outputs.version }}_${{ inputs.stage }}.ini"
          s3Path="s3://nvp1-${{ secrets.PLAYER_S3_BUCKET_DEPLOYMENT }}/player/uiconf"

          tmp=$(mktemp)
          echo "[general]" > "$tmp"
          echo "component.name = ${{ inputs.schema-type }}" >> "$tmp"
          echo "component.version = ${{ inputs.stage }}" >> "$tmp"
          echo "" >> "$tmp"
          echo "[defaultKdp]" >> "$tmp"
          echo "objectType = 6" >> "$tmp"
          echo "widgets.versions.conf_vars = '{\"version\":\"${{ steps.version.outputs.version }}\"}'" >> "$tmp"
          echo "widgets.versions.name = playkitVersions" >> "$tmp"
          echo "widgets.versions.usage = list,${{ steps.version.outputs.version }},${{ inputs.schema-type }},${{ inputs.stage }}" >> "$tmp"
          echo "widgets.versions.config = '${jsonConf}'" >> "$tmp"

          mv "$tmp" ${iniName}

          aws s3 cp ${iniName} ${s3Path}/

      - name: Output file_name
        id: file_name
        run: |
          iniName="playkit_${{ inputs.schema-type }}_${{ steps.version.outputs.version }}_${{ inputs.stage }}.ini"

          echo "file name is: ${iniName}"
          echo "file_name=${iniName}" >> $GITHUB_OUTPUT