## CD - Promote schema
name: Promote
run-name: Promote

on:
  workflow_call:
    secrets:
      PLAYER_CENTRAL_ACCOUNT_ID:
        required: true
      PLAYER_SERVICES_ACCOUNT_ID:
        required: true
      PLAYER_S3_BUCKET_DEPLOYMENT:
        required: true
      PLAYER_LAMBDA_NAME:
        required: true
      PLAYER_MSTEAMS_WEBHOOK:
        required: true
      PLAYER_GITHUB_KCONF_TOKEN:
        required: false
    inputs:
      promotion-type:
        type: string
        required: true
        description: "from - to"
      schema-type:
        type: string
        required: true
        description: "schema-type - example: 'playerV3Versions/playerV3OvpVersions'"
      uiconf-new-version:
        type: string
        required: false
        description: "not required - if no value is given it will increment the minor version - example 'from 1.00 to 1.01'"

jobs:
  promote-schema:
    uses: ./.github/workflows/player_promote_schema.yaml
    secrets:
      PLAYER_CENTRAL_ACCOUNT_ID: ${{ secrets.PLAYER_CENTRAL_ACCOUNT_ID }}
      PLAYER_SERVICES_ACCOUNT_ID: ${{ secrets.PLAYER_SERVICES_ACCOUNT_ID }}
      PLAYER_S3_BUCKET_DEPLOYMENT: ${{ secrets.PLAYER_S3_BUCKET_DEPLOYMENT }}
    with:
      promotion-type: ${{ inputs.promotion-type }}
      schema-type: ${{ inputs.schema-type }}
  build-uiconf:
    needs: promote-schema
    uses: ./.github/workflows/player_build_uiconf.yaml
    secrets:
      PLAYER_CENTRAL_ACCOUNT_ID: ${{ secrets.PLAYER_CENTRAL_ACCOUNT_ID }}
      PLAYER_SERVICES_ACCOUNT_ID: ${{ secrets.PLAYER_SERVICES_ACCOUNT_ID }}
      PLAYER_S3_BUCKET_DEPLOYMENT: ${{ secrets.PLAYER_S3_BUCKET_DEPLOYMENT }}
    with:
      stage: ${{ needs.promote-schema.outputs.stage }}
      env: ${{ needs.promote-schema.outputs.env }}
      schema-type: ${{ inputs.schema-type }}
      uiconf-new-version: ${{ inputs.uiconf-new-version }}
  deploy-uiconf:
    needs: [ promote-schema, build-uiconf ]
    uses: ./.github/workflows/player_deploy_uiconf.yaml
    secrets:
      PLAYER_CENTRAL_ACCOUNT_ID: ${{ secrets.PLAYER_CENTRAL_ACCOUNT_ID }}
      PLAYER_LAMBDA_NAME: ${{ secrets.PLAYER_LAMBDA_NAME }}
    with:
      stage: ${{ needs.promote-schema.outputs.stage }}
      env: ${{ needs.promote-schema.outputs.env }}
      version: ${{ needs.build-uiconf.outputs.version }}
      schema-type: ${{ inputs.schema-type }}
      file-name: ${{ needs.build-uiconf.outputs.file-name }}
  promote-schema-parameter:
    uses: ./.github/workflows/player_promote_schema_parameter.yaml
    secrets:
      PLAYER_CENTRAL_ACCOUNT_ID: ${{ secrets.PLAYER_CENTRAL_ACCOUNT_ID }}
    with:
      promotion-type: ${{ inputs.promotion-type }}
      schema-type: ${{ inputs.schema-type }}
  check-secret:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check-secret.outputs.exists }}
    steps:
      - name: Check secret
        id: check-secret
        env:
          PLAYER_GITHUB_KCONF_TOKEN: ${{ secrets.PLAYER_GITHUB_KCONF_TOKEN }}
        if: ${{ env.PLAYER_GITHUB_KCONF_TOKEN != '' }}
        run: |
          echo "exists=true" >> $GITHUB_OUTPUT
  deploy-kconf:
    needs: [ check-secret, promote-schema-parameter ]
    if: ${{ needs.check-secret.outputs.exists == 'true' }}
    uses: ./.github/workflows/player_deploy_kconf.yaml
    secrets:
      PLAYER_CENTRAL_ACCOUNT_ID: ${{ secrets.PLAYER_CENTRAL_ACCOUNT_ID }}
      PLAYER_GITHUB_KCONF_TOKEN: ${{ secrets.PLAYER_GITHUB_KCONF_TOKEN }}
    with:
      stage: ${{ needs.promote-schema-parameter.outputs.stage }}
      env: ${{ needs.promote-schema-parameter.outputs.env }}
      schema-type: ${{ inputs.schema-type }}
      uiconf-new-version: ${{ inputs.uiconf-new-version }}
  notification:
    if: always()
    uses: ./.github/workflows/notification.yaml
    needs: [ promote-schema, build-uiconf, deploy-uiconf ]
    secrets:
      PLAYER_MSTEAMS_WEBHOOK: ${{ secrets.PLAYER_MSTEAMS_WEBHOOK }}
    with:
      failure-status: ${{ contains(needs.*.result, 'failure') }}
      cancelled-status: ${{ contains(needs.*.result, 'cancelled') }}